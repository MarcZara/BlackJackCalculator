import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

public class Deck 
{
  int deck [] = new int[312];
  int counter = 0;
  public Deck() 
  {
    //Fill Deck
    //2-9
    for (int i = 0; i <24 ; i++)
    {
      deck [i] = 2;
    }
    for (int i = 24; i <48 ; i++)
    {
      deck [i] = 3;
    }
    for (int i = 48; i <72 ; i++)
    {
      deck [i] = 4;
    }
    for (int i = 72; i <96 ; i++)
    {
      deck [i] = 5;
    }
    for (int i = 96; i <120 ; i++)
    {
      deck [i] = 6;
    }
    for (int i = 120; i <144 ; i++)
    {
      deck [i] = 7;
    }
    for (int i = 144; i <168 ; i++)
    {
      deck [i] = 8;
    }
    for (int i = 168; i <192 ; i++)
    {
      deck [i] = 9;
    }
    //Four 10 values
    for (int i = 192; i< 288; i++)
    {
      deck[i]= 10;
    }
    //Ace
    for (int i = 288; i< 312; i++)
      deck[i] = 11;
  }
  public void showDeck ()
  {
    System.out.println(Arrays.toString(deck));
  }
  public void shuffle()
  {
    // If running on Java 6 or older, use `new Random()` on RHS here
    Random rnd = ThreadLocalRandom.current();
    counter = 0;
    while (counter != 3)
    {
      for (int i = deck.length - 1; i > 0; i--)
      {
        int index = rnd.nextInt(i + 1);
        // Simple swap
        int a = deck[index];
        deck[index] = deck[i];
        deck[i] = a;
      }
      counter++;
    }
  }
  
  public boolean needShuffle ()
  {
    if (counter > 208)
      return true;
    else
      return false;
  }
  public int dealCard ()
  {
    counter++;
    return deck[counter - 1];
  }
  public int getCounter ()
  {
    return counter;
  }
}